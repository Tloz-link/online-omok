// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum STONE_TYPE : int {
  STONE_TYPE_BLANK = 0,
  STONE_TYPE_BLACK = 1,
  STONE_TYPE_WHITE = 2,
  STONE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  STONE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool STONE_TYPE_IsValid(int value);
constexpr STONE_TYPE STONE_TYPE_MIN = STONE_TYPE_BLANK;
constexpr STONE_TYPE STONE_TYPE_MAX = STONE_TYPE_WHITE;
constexpr int STONE_TYPE_ARRAYSIZE = STONE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STONE_TYPE_descriptor();
template<typename T>
inline const std::string& STONE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, STONE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function STONE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    STONE_TYPE_descriptor(), enum_t_value);
}
inline bool STONE_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, STONE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<STONE_TYPE>(
    STONE_TYPE_descriptor(), name, value);
}
enum PLAYER_TYPE : int {
  PLAYER_TYPE_NONE = 0,
  PLAYER_TYPE_BLACK = 1,
  PLAYER_TYPE_WHITE = 2,
  PLAYER_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PLAYER_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PLAYER_TYPE_IsValid(int value);
constexpr PLAYER_TYPE PLAYER_TYPE_MIN = PLAYER_TYPE_NONE;
constexpr PLAYER_TYPE PLAYER_TYPE_MAX = PLAYER_TYPE_WHITE;
constexpr int PLAYER_TYPE_ARRAYSIZE = PLAYER_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLAYER_TYPE_descriptor();
template<typename T>
inline const std::string& PLAYER_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PLAYER_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PLAYER_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PLAYER_TYPE_descriptor(), enum_t_value);
}
inline bool PLAYER_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PLAYER_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PLAYER_TYPE>(
    PLAYER_TYPE_descriptor(), name, value);
}
enum PLAYER_STATE : int {
  PLAYER_STATE_DISCONNECTED = 0,
  PLAYER_STATE_CONNECTED = 1,
  PLAYER_STATE_PLAYING = 2,
  PLAYER_STATE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PLAYER_STATE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PLAYER_STATE_IsValid(int value);
constexpr PLAYER_STATE PLAYER_STATE_MIN = PLAYER_STATE_DISCONNECTED;
constexpr PLAYER_STATE PLAYER_STATE_MAX = PLAYER_STATE_PLAYING;
constexpr int PLAYER_STATE_ARRAYSIZE = PLAYER_STATE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLAYER_STATE_descriptor();
template<typename T>
inline const std::string& PLAYER_STATE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PLAYER_STATE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PLAYER_STATE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PLAYER_STATE_descriptor(), enum_t_value);
}
inline bool PLAYER_STATE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PLAYER_STATE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PLAYER_STATE>(
    PLAYER_STATE_descriptor(), name, value);
}
enum LOG_IN_ERROR : int {
  LOG_IN_ERROR_NONE = 0,
  LOG_IN_ERROR_ALREADY_CONNECTED = 1,
  LOG_IN_ERROR_NO_ACCOUNT = 2,
  LOG_IN_ERROR_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LOG_IN_ERROR_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LOG_IN_ERROR_IsValid(int value);
constexpr LOG_IN_ERROR LOG_IN_ERROR_MIN = LOG_IN_ERROR_NONE;
constexpr LOG_IN_ERROR LOG_IN_ERROR_MAX = LOG_IN_ERROR_NO_ACCOUNT;
constexpr int LOG_IN_ERROR_ARRAYSIZE = LOG_IN_ERROR_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LOG_IN_ERROR_descriptor();
template<typename T>
inline const std::string& LOG_IN_ERROR_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LOG_IN_ERROR>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LOG_IN_ERROR_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LOG_IN_ERROR_descriptor(), enum_t_value);
}
inline bool LOG_IN_ERROR_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LOG_IN_ERROR* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LOG_IN_ERROR>(
    LOG_IN_ERROR_descriptor(), name, value);
}
enum SIGN_UP_ERROR : int {
  SIGN_UP_ERROR_NONE = 0,
  SIGN_UP_ERROR_ALREADY_SIGN_UP = 1,
  SIGN_UP_ERROR_WRONG_COUNT = 2,
  SIGN_UP_ERROR_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SIGN_UP_ERROR_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SIGN_UP_ERROR_IsValid(int value);
constexpr SIGN_UP_ERROR SIGN_UP_ERROR_MIN = SIGN_UP_ERROR_NONE;
constexpr SIGN_UP_ERROR SIGN_UP_ERROR_MAX = SIGN_UP_ERROR_WRONG_COUNT;
constexpr int SIGN_UP_ERROR_ARRAYSIZE = SIGN_UP_ERROR_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIGN_UP_ERROR_descriptor();
template<typename T>
inline const std::string& SIGN_UP_ERROR_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SIGN_UP_ERROR>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SIGN_UP_ERROR_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SIGN_UP_ERROR_descriptor(), enum_t_value);
}
inline bool SIGN_UP_ERROR_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SIGN_UP_ERROR* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SIGN_UP_ERROR>(
    SIGN_UP_ERROR_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::STONE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::STONE_TYPE>() {
  return ::Protocol::STONE_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Protocol::PLAYER_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PLAYER_TYPE>() {
  return ::Protocol::PLAYER_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Protocol::PLAYER_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PLAYER_STATE>() {
  return ::Protocol::PLAYER_STATE_descriptor();
}
template <> struct is_proto_enum< ::Protocol::LOG_IN_ERROR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::LOG_IN_ERROR>() {
  return ::Protocol::LOG_IN_ERROR_descriptor();
}
template <> struct is_proto_enum< ::Protocol::SIGN_UP_ERROR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::SIGN_UP_ERROR>() {
  return ::Protocol::SIGN_UP_ERROR_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
