// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class EnemyInfo;
struct EnemyInfoDefaultTypeInternal;
extern EnemyInfoDefaultTypeInternal _EnemyInfo_default_instance_;
class GameRoomInfo;
struct GameRoomInfoDefaultTypeInternal;
extern GameRoomInfoDefaultTypeInternal _GameRoomInfo_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class StoneInfo;
struct StoneInfoDefaultTypeInternal;
extern StoneInfoDefaultTypeInternal _StoneInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::EnemyInfo* Arena::CreateMaybeMessage<::Protocol::EnemyInfo>(Arena*);
template<> ::Protocol::GameRoomInfo* Arena::CreateMaybeMessage<::Protocol::GameRoomInfo>(Arena*);
template<> ::Protocol::PlayerInfo* Arena::CreateMaybeMessage<::Protocol::PlayerInfo>(Arena*);
template<> ::Protocol::StoneInfo* Arena::CreateMaybeMessage<::Protocol::StoneInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class StoneInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.StoneInfo) */ {
 public:
  inline StoneInfo() : StoneInfo(nullptr) {}
  ~StoneInfo() override;
  explicit PROTOBUF_CONSTEXPR StoneInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoneInfo(const StoneInfo& from);
  StoneInfo(StoneInfo&& from) noexcept
    : StoneInfo() {
    *this = ::std::move(from);
  }

  inline StoneInfo& operator=(const StoneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoneInfo& operator=(StoneInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoneInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoneInfo* internal_default_instance() {
    return reinterpret_cast<const StoneInfo*>(
               &_StoneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StoneInfo& a, StoneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StoneInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoneInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoneInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StoneInfo& from) {
    StoneInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoneInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.StoneInfo";
  }
  protected:
  explicit StoneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoneTypeFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
  };
  // .Protocol.STONE_TYPE stoneType = 1;
  void clear_stonetype();
  ::Protocol::STONE_TYPE stonetype() const;
  void set_stonetype(::Protocol::STONE_TYPE value);
  private:
  ::Protocol::STONE_TYPE _internal_stonetype() const;
  void _internal_set_stonetype(::Protocol::STONE_TYPE value);
  public:

  // uint32 posX = 2;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 3;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.StoneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int stonetype_;
    uint32_t posx_;
    uint32_t posy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInfo& from) {
    PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kPlayerTypeFieldNumber = 3,
    kPlayerStateFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // .Protocol.PLAYER_TYPE playerType = 3;
  void clear_playertype();
  ::Protocol::PLAYER_TYPE playertype() const;
  void set_playertype(::Protocol::PLAYER_TYPE value);
  private:
  ::Protocol::PLAYER_TYPE _internal_playertype() const;
  void _internal_set_playertype(::Protocol::PLAYER_TYPE value);
  public:

  // .Protocol.PLAYER_STATE playerState = 4;
  void clear_playerstate();
  ::Protocol::PLAYER_STATE playerstate() const;
  void set_playerstate(::Protocol::PLAYER_STATE value);
  private:
  ::Protocol::PLAYER_STATE _internal_playerstate() const;
  void _internal_set_playerstate(::Protocol::PLAYER_STATE value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t playerid_;
    int playertype_;
    int playerstate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class EnemyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EnemyInfo) */ {
 public:
  inline EnemyInfo() : EnemyInfo(nullptr) {}
  ~EnemyInfo() override;
  explicit PROTOBUF_CONSTEXPR EnemyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnemyInfo(const EnemyInfo& from);
  EnemyInfo(EnemyInfo&& from) noexcept
    : EnemyInfo() {
    *this = ::std::move(from);
  }

  inline EnemyInfo& operator=(const EnemyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnemyInfo& operator=(EnemyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnemyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnemyInfo* internal_default_instance() {
    return reinterpret_cast<const EnemyInfo*>(
               &_EnemyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnemyInfo& a, EnemyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EnemyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnemyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnemyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnemyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnemyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnemyInfo& from) {
    EnemyInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnemyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EnemyInfo";
  }
  protected:
  explicit EnemyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPlayerTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Protocol.PLAYER_TYPE playerType = 2;
  void clear_playertype();
  ::Protocol::PLAYER_TYPE playertype() const;
  void set_playertype(::Protocol::PLAYER_TYPE value);
  private:
  ::Protocol::PLAYER_TYPE _internal_playertype() const;
  void _internal_set_playertype(::Protocol::PLAYER_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EnemyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int playertype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class GameRoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameRoomInfo) */ {
 public:
  inline GameRoomInfo() : GameRoomInfo(nullptr) {}
  ~GameRoomInfo() override;
  explicit PROTOBUF_CONSTEXPR GameRoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameRoomInfo(const GameRoomInfo& from);
  GameRoomInfo(GameRoomInfo&& from) noexcept
    : GameRoomInfo() {
    *this = ::std::move(from);
  }

  inline GameRoomInfo& operator=(const GameRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameRoomInfo& operator=(GameRoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameRoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameRoomInfo* internal_default_instance() {
    return reinterpret_cast<const GameRoomInfo*>(
               &_GameRoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameRoomInfo& a, GameRoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameRoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameRoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameRoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameRoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameRoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameRoomInfo& from) {
    GameRoomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameRoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameRoomInfo";
  }
  protected:
  explicit GameRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kPlayerTypeFieldNumber = 2,
    kPlayerStateFieldNumber = 3,
  };
  // uint64 roomId = 1;
  void clear_roomid();
  uint64_t roomid() const;
  void set_roomid(uint64_t value);
  private:
  uint64_t _internal_roomid() const;
  void _internal_set_roomid(uint64_t value);
  public:

  // .Protocol.PLAYER_TYPE playerType = 2;
  void clear_playertype();
  ::Protocol::PLAYER_TYPE playertype() const;
  void set_playertype(::Protocol::PLAYER_TYPE value);
  private:
  ::Protocol::PLAYER_TYPE _internal_playertype() const;
  void _internal_set_playertype(::Protocol::PLAYER_TYPE value);
  public:

  // .Protocol.PLAYER_STATE playerState = 3;
  void clear_playerstate();
  ::Protocol::PLAYER_STATE playerstate() const;
  void set_playerstate(::Protocol::PLAYER_STATE value);
  private:
  ::Protocol::PLAYER_STATE _internal_playerstate() const;
  void _internal_set_playerstate(::Protocol::PLAYER_STATE value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameRoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t roomid_;
    int playertype_;
    int playerstate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StoneInfo

// .Protocol.STONE_TYPE stoneType = 1;
inline void StoneInfo::clear_stonetype() {
  _impl_.stonetype_ = 0;
}
inline ::Protocol::STONE_TYPE StoneInfo::_internal_stonetype() const {
  return static_cast< ::Protocol::STONE_TYPE >(_impl_.stonetype_);
}
inline ::Protocol::STONE_TYPE StoneInfo::stonetype() const {
  // @@protoc_insertion_point(field_get:Protocol.StoneInfo.stoneType)
  return _internal_stonetype();
}
inline void StoneInfo::_internal_set_stonetype(::Protocol::STONE_TYPE value) {
  
  _impl_.stonetype_ = value;
}
inline void StoneInfo::set_stonetype(::Protocol::STONE_TYPE value) {
  _internal_set_stonetype(value);
  // @@protoc_insertion_point(field_set:Protocol.StoneInfo.stoneType)
}

// uint32 posX = 2;
inline void StoneInfo::clear_posx() {
  _impl_.posx_ = 0u;
}
inline uint32_t StoneInfo::_internal_posx() const {
  return _impl_.posx_;
}
inline uint32_t StoneInfo::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.StoneInfo.posX)
  return _internal_posx();
}
inline void StoneInfo::_internal_set_posx(uint32_t value) {
  
  _impl_.posx_ = value;
}
inline void StoneInfo::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.StoneInfo.posX)
}

// uint32 posY = 3;
inline void StoneInfo::clear_posy() {
  _impl_.posy_ = 0u;
}
inline uint32_t StoneInfo::_internal_posy() const {
  return _impl_.posy_;
}
inline uint32_t StoneInfo::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.StoneInfo.posY)
  return _internal_posy();
}
inline void StoneInfo::_internal_set_posy(uint32_t value) {
  
  _impl_.posy_ = value;
}
inline void StoneInfo::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.StoneInfo.posY)
}

// -------------------------------------------------------------------

// PlayerInfo

// uint64 playerId = 1;
inline void PlayerInfo::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t PlayerInfo::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t PlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.playerId)
  return _internal_playerid();
}
inline void PlayerInfo::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void PlayerInfo::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.playerId)
}

// string name = 2;
inline void PlayerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.name)
}
inline std::string* PlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerInfo.name)
  return _s;
}
inline const std::string& PlayerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PlayerInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerInfo.name)
  return _impl_.name_.Release();
}
inline void PlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerInfo.name)
}

// .Protocol.PLAYER_TYPE playerType = 3;
inline void PlayerInfo::clear_playertype() {
  _impl_.playertype_ = 0;
}
inline ::Protocol::PLAYER_TYPE PlayerInfo::_internal_playertype() const {
  return static_cast< ::Protocol::PLAYER_TYPE >(_impl_.playertype_);
}
inline ::Protocol::PLAYER_TYPE PlayerInfo::playertype() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.playerType)
  return _internal_playertype();
}
inline void PlayerInfo::_internal_set_playertype(::Protocol::PLAYER_TYPE value) {
  
  _impl_.playertype_ = value;
}
inline void PlayerInfo::set_playertype(::Protocol::PLAYER_TYPE value) {
  _internal_set_playertype(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.playerType)
}

// .Protocol.PLAYER_STATE playerState = 4;
inline void PlayerInfo::clear_playerstate() {
  _impl_.playerstate_ = 0;
}
inline ::Protocol::PLAYER_STATE PlayerInfo::_internal_playerstate() const {
  return static_cast< ::Protocol::PLAYER_STATE >(_impl_.playerstate_);
}
inline ::Protocol::PLAYER_STATE PlayerInfo::playerstate() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.playerState)
  return _internal_playerstate();
}
inline void PlayerInfo::_internal_set_playerstate(::Protocol::PLAYER_STATE value) {
  
  _impl_.playerstate_ = value;
}
inline void PlayerInfo::set_playerstate(::Protocol::PLAYER_STATE value) {
  _internal_set_playerstate(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.playerState)
}

// -------------------------------------------------------------------

// EnemyInfo

// string name = 1;
inline void EnemyInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EnemyInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.EnemyInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnemyInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.EnemyInfo.name)
}
inline std::string* EnemyInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.EnemyInfo.name)
  return _s;
}
inline const std::string& EnemyInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EnemyInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnemyInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EnemyInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.EnemyInfo.name)
  return _impl_.name_.Release();
}
inline void EnemyInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.EnemyInfo.name)
}

// .Protocol.PLAYER_TYPE playerType = 2;
inline void EnemyInfo::clear_playertype() {
  _impl_.playertype_ = 0;
}
inline ::Protocol::PLAYER_TYPE EnemyInfo::_internal_playertype() const {
  return static_cast< ::Protocol::PLAYER_TYPE >(_impl_.playertype_);
}
inline ::Protocol::PLAYER_TYPE EnemyInfo::playertype() const {
  // @@protoc_insertion_point(field_get:Protocol.EnemyInfo.playerType)
  return _internal_playertype();
}
inline void EnemyInfo::_internal_set_playertype(::Protocol::PLAYER_TYPE value) {
  
  _impl_.playertype_ = value;
}
inline void EnemyInfo::set_playertype(::Protocol::PLAYER_TYPE value) {
  _internal_set_playertype(value);
  // @@protoc_insertion_point(field_set:Protocol.EnemyInfo.playerType)
}

// -------------------------------------------------------------------

// GameRoomInfo

// uint64 roomId = 1;
inline void GameRoomInfo::clear_roomid() {
  _impl_.roomid_ = uint64_t{0u};
}
inline uint64_t GameRoomInfo::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint64_t GameRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.GameRoomInfo.roomId)
  return _internal_roomid();
}
inline void GameRoomInfo::_internal_set_roomid(uint64_t value) {
  
  _impl_.roomid_ = value;
}
inline void GameRoomInfo::set_roomid(uint64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.GameRoomInfo.roomId)
}

// .Protocol.PLAYER_TYPE playerType = 2;
inline void GameRoomInfo::clear_playertype() {
  _impl_.playertype_ = 0;
}
inline ::Protocol::PLAYER_TYPE GameRoomInfo::_internal_playertype() const {
  return static_cast< ::Protocol::PLAYER_TYPE >(_impl_.playertype_);
}
inline ::Protocol::PLAYER_TYPE GameRoomInfo::playertype() const {
  // @@protoc_insertion_point(field_get:Protocol.GameRoomInfo.playerType)
  return _internal_playertype();
}
inline void GameRoomInfo::_internal_set_playertype(::Protocol::PLAYER_TYPE value) {
  
  _impl_.playertype_ = value;
}
inline void GameRoomInfo::set_playertype(::Protocol::PLAYER_TYPE value) {
  _internal_set_playertype(value);
  // @@protoc_insertion_point(field_set:Protocol.GameRoomInfo.playerType)
}

// .Protocol.PLAYER_STATE playerState = 3;
inline void GameRoomInfo::clear_playerstate() {
  _impl_.playerstate_ = 0;
}
inline ::Protocol::PLAYER_STATE GameRoomInfo::_internal_playerstate() const {
  return static_cast< ::Protocol::PLAYER_STATE >(_impl_.playerstate_);
}
inline ::Protocol::PLAYER_STATE GameRoomInfo::playerstate() const {
  // @@protoc_insertion_point(field_get:Protocol.GameRoomInfo.playerState)
  return _internal_playerstate();
}
inline void GameRoomInfo::_internal_set_playerstate(::Protocol::PLAYER_STATE value) {
  
  _impl_.playerstate_ = value;
}
inline void GameRoomInfo::set_playerstate(::Protocol::PLAYER_STATE value) {
  _internal_set_playerstate(value);
  // @@protoc_insertion_point(field_set:Protocol.GameRoomInfo.playerState)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
