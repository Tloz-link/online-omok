// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR S_Login::S_Login(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerinfo_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LoginDefaultTypeInternal() {}
  union {
    S_Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LoginDefaultTypeInternal _S_Login_default_instance_;
PROTOBUF_CONSTEXPR C_SignUp::C_SignUp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SignUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SignUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SignUpDefaultTypeInternal() {}
  union {
    C_SignUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SignUpDefaultTypeInternal _C_SignUp_default_instance_;
PROTOBUF_CONSTEXPR S_ThrowSignUpError::S_ThrowSignUpError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ThrowSignUpErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ThrowSignUpErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ThrowSignUpErrorDefaultTypeInternal() {}
  union {
    S_ThrowSignUpError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ThrowSignUpErrorDefaultTypeInternal _S_ThrowSignUpError_default_instance_;
PROTOBUF_CONSTEXPR C_EnterRoom::C_EnterRoom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_EnterRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EnterRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EnterRoomDefaultTypeInternal() {}
  union {
    C_EnterRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EnterRoomDefaultTypeInternal _C_EnterRoom_default_instance_;
PROTOBUF_CONSTEXPR S_StartGame::S_StartGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enemyinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_StartGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_StartGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_StartGameDefaultTypeInternal() {}
  union {
    S_StartGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_StartGameDefaultTypeInternal _S_StartGame_default_instance_;
PROTOBUF_CONSTEXPR S_LeaveGame::S_LeaveGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LeaveGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LeaveGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LeaveGameDefaultTypeInternal() {}
  union {
    S_LeaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LeaveGameDefaultTypeInternal _S_LeaveGame_default_instance_;
PROTOBUF_CONSTEXPR C_PlayStone::C_PlayStone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stoneinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PlayStoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PlayStoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PlayStoneDefaultTypeInternal() {}
  union {
    C_PlayStone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PlayStoneDefaultTypeInternal _C_PlayStone_default_instance_;
PROTOBUF_CONSTEXPR S_PlayStone::S_PlayStone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stoneinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PlayStoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PlayStoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PlayStoneDefaultTypeInternal() {}
  union {
    S_PlayStone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PlayStoneDefaultTypeInternal _S_PlayStone_default_instance_;
PROTOBUF_CONSTEXPR S_CheckStone::S_CheckStone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CheckStoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CheckStoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CheckStoneDefaultTypeInternal() {}
  union {
    S_CheckStone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CheckStoneDefaultTypeInternal _S_CheckStone_default_instance_;
PROTOBUF_CONSTEXPR S_ThrowResult::S_ThrowResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stoneinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ThrowResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ThrowResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ThrowResultDefaultTypeInternal() {}
  union {
    S_ThrowResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ThrowResultDefaultTypeInternal _S_ThrowResult_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Login, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Login, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Login, _impl_.playerinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SignUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SignUp, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ThrowSignUpError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ThrowSignUpError, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EnterRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EnterRoom, _impl_.accountid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_StartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_StartGame, _impl_.enemyinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LeaveGame, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PlayStone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PlayStone, _impl_.stoneinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayStone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PlayStone, _impl_.stoneinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CheckStone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CheckStone, _impl_.enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ThrowResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ThrowResult, _impl_.stoneinfo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::S_Login)},
  { 9, -1, -1, sizeof(::Protocol::C_SignUp)},
  { 16, -1, -1, sizeof(::Protocol::S_ThrowSignUpError)},
  { 23, -1, -1, sizeof(::Protocol::C_EnterRoom)},
  { 30, -1, -1, sizeof(::Protocol::S_StartGame)},
  { 37, -1, -1, sizeof(::Protocol::S_LeaveGame)},
  { 44, -1, -1, sizeof(::Protocol::C_PlayStone)},
  { 51, -1, -1, sizeof(::Protocol::S_PlayStone)},
  { 58, -1, -1, sizeof(::Protocol::S_CheckStone)},
  { 65, -1, -1, sizeof(::Protocol::S_ThrowResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_S_Login_default_instance_._instance,
  &::Protocol::_C_SignUp_default_instance_._instance,
  &::Protocol::_S_ThrowSignUpError_default_instance_._instance,
  &::Protocol::_C_EnterRoom_default_instance_._instance,
  &::Protocol::_S_StartGame_default_instance_._instance,
  &::Protocol::_S_LeaveGame_default_instance_._instance,
  &::Protocol::_C_PlayStone_default_instance_._instance,
  &::Protocol::_S_PlayStone_default_instance_._instance,
  &::Protocol::_S_CheckStone_default_instance_._instance,
  &::Protocol::_S_ThrowResult_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"k\n\007S_Login\022\017\n\007success\030\001 \001(\010"
  "\022%\n\005error\030\002 \001(\0162\026.Protocol.LOG_IN_ERROR\022"
  "(\n\nplayerInfo\030\003 \001(\0132\024.Protocol.PlayerInf"
  "o\"\030\n\010C_SignUp\022\014\n\004name\030\001 \001(\t\"<\n\022S_ThrowSi"
  "gnUpError\022&\n\005error\030\001 \001(\0162\027.Protocol.SIGN"
  "_UP_ERROR\" \n\013C_EnterRoom\022\021\n\taccountId\030\001 "
  "\001(\004\"5\n\013S_StartGame\022&\n\tenemyInfo\030\001 \001(\0132\023."
  "Protocol.EnemyInfo\"\036\n\013S_LeaveGame\022\017\n\007suc"
  "cess\030\001 \001(\010\"5\n\013C_PlayStone\022&\n\tstoneInfo\030\001"
  " \001(\0132\023.Protocol.StoneInfo\"5\n\013S_PlayStone"
  "\022&\n\tstoneInfo\030\001 \001(\0132\023.Protocol.StoneInfo"
  "\"\036\n\014S_CheckStone\022\016\n\006enable\030\001 \001(\010\"7\n\rS_Th"
  "rowResult\022&\n\tstoneInfo\030\001 \001(\0132\023.Protocol."
  "StoneInfob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 577, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 10,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class S_Login::_Internal {
 public:
  static const ::Protocol::PlayerInfo& playerinfo(const S_Login* msg);
};

const ::Protocol::PlayerInfo&
S_Login::_Internal::playerinfo(const S_Login* msg) {
  return *msg->_impl_.playerinfo_;
}
void S_Login::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
S_Login::S_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Login)
}
S_Login::S_Login(const S_Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Login* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    _this->_impl_.playerinfo_ = new ::Protocol::PlayerInfo(*from._impl_.playerinfo_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Login)
}

inline void S_Login::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Login::~S_Login() {
  // @@protoc_insertion_point(destructor:Protocol.S_Login)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerinfo_;
}

void S_Login::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Login)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Login::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.LOG_IN_ERROR error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::Protocol::LOG_IN_ERROR>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerInfo playerInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Login::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Login)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.LOG_IN_ERROR error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // .Protocol.PlayerInfo playerInfo = 3;
  if (this->_internal_has_playerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::playerinfo(this),
        _Internal::playerinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Login)
  return target;
}

size_t S_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Login)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PlayerInfo playerInfo = 3;
  if (this->_internal_has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerinfo_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol.LOG_IN_ERROR error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Login::GetClassData() const { return &_class_data_; }


void S_Login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Login*>(&to_msg);
  auto& from = static_cast<const S_Login&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Login)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerinfo()) {
    _this->_internal_mutable_playerinfo()->::Protocol::PlayerInfo::MergeFrom(
        from._internal_playerinfo());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Login::CopyFrom(const S_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Login::IsInitialized() const {
  return true;
}

void S_Login::InternalSwap(S_Login* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Login, _impl_.error_)
      + sizeof(S_Login::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(S_Login, _impl_.playerinfo_)>(
          reinterpret_cast<char*>(&_impl_.playerinfo_),
          reinterpret_cast<char*>(&other->_impl_.playerinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Login::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class C_SignUp::_Internal {
 public:
};

C_SignUp::C_SignUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SignUp)
}
C_SignUp::C_SignUp(const C_SignUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SignUp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SignUp)
}

inline void C_SignUp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_SignUp::~C_SignUp() {
  // @@protoc_insertion_point(destructor:Protocol.C_SignUp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SignUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void C_SignUp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SignUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SignUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SignUp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_SignUp.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SignUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SignUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_SignUp.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SignUp)
  return target;
}

size_t C_SignUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SignUp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SignUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SignUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SignUp::GetClassData() const { return &_class_data_; }


void C_SignUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SignUp*>(&to_msg);
  auto& from = static_cast<const C_SignUp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SignUp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SignUp::CopyFrom(const C_SignUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SignUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SignUp::IsInitialized() const {
  return true;
}

void C_SignUp::InternalSwap(C_SignUp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SignUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class S_ThrowSignUpError::_Internal {
 public:
};

S_ThrowSignUpError::S_ThrowSignUpError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ThrowSignUpError)
}
S_ThrowSignUpError::S_ThrowSignUpError(const S_ThrowSignUpError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ThrowSignUpError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ThrowSignUpError)
}

inline void S_ThrowSignUpError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ThrowSignUpError::~S_ThrowSignUpError() {
  // @@protoc_insertion_point(destructor:Protocol.S_ThrowSignUpError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ThrowSignUpError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ThrowSignUpError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ThrowSignUpError::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ThrowSignUpError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ThrowSignUpError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.SIGN_UP_ERROR error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::Protocol::SIGN_UP_ERROR>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ThrowSignUpError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ThrowSignUpError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.SIGN_UP_ERROR error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ThrowSignUpError)
  return target;
}

size_t S_ThrowSignUpError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ThrowSignUpError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SIGN_UP_ERROR error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ThrowSignUpError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ThrowSignUpError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ThrowSignUpError::GetClassData() const { return &_class_data_; }


void S_ThrowSignUpError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ThrowSignUpError*>(&to_msg);
  auto& from = static_cast<const S_ThrowSignUpError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ThrowSignUpError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ThrowSignUpError::CopyFrom(const S_ThrowSignUpError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ThrowSignUpError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ThrowSignUpError::IsInitialized() const {
  return true;
}

void S_ThrowSignUpError::InternalSwap(S_ThrowSignUpError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ThrowSignUpError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class C_EnterRoom::_Internal {
 public:
};

C_EnterRoom::C_EnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_EnterRoom)
}
C_EnterRoom::C_EnterRoom(const C_EnterRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_EnterRoom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accountid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.accountid_ = from._impl_.accountid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_EnterRoom)
}

inline void C_EnterRoom::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accountid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_EnterRoom::~C_EnterRoom() {
  // @@protoc_insertion_point(destructor:Protocol.C_EnterRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_EnterRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_EnterRoom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_EnterRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_EnterRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_EnterRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 accountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_EnterRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_EnterRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 accountId = 1;
  if (this->_internal_accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_EnterRoom)
  return target;
}

size_t C_EnterRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_EnterRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 accountId = 1;
  if (this->_internal_accountid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EnterRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_EnterRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EnterRoom::GetClassData() const { return &_class_data_; }


void C_EnterRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_EnterRoom*>(&to_msg);
  auto& from = static_cast<const C_EnterRoom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_EnterRoom)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_accountid() != 0) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_EnterRoom::CopyFrom(const C_EnterRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_EnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_EnterRoom::IsInitialized() const {
  return true;
}

void C_EnterRoom::InternalSwap(C_EnterRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.accountid_, other->_impl_.accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_EnterRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class S_StartGame::_Internal {
 public:
  static const ::Protocol::EnemyInfo& enemyinfo(const S_StartGame* msg);
};

const ::Protocol::EnemyInfo&
S_StartGame::_Internal::enemyinfo(const S_StartGame* msg) {
  return *msg->_impl_.enemyinfo_;
}
void S_StartGame::clear_enemyinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.enemyinfo_ != nullptr) {
    delete _impl_.enemyinfo_;
  }
  _impl_.enemyinfo_ = nullptr;
}
S_StartGame::S_StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_StartGame)
}
S_StartGame::S_StartGame(const S_StartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_StartGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enemyinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enemyinfo()) {
    _this->_impl_.enemyinfo_ = new ::Protocol::EnemyInfo(*from._impl_.enemyinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_StartGame)
}

inline void S_StartGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enemyinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_StartGame::~S_StartGame() {
  // @@protoc_insertion_point(destructor:Protocol.S_StartGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_StartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.enemyinfo_;
}

void S_StartGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_StartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_StartGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.enemyinfo_ != nullptr) {
    delete _impl_.enemyinfo_;
  }
  _impl_.enemyinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_StartGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.EnemyInfo enemyInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enemyinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_StartGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_StartGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.EnemyInfo enemyInfo = 1;
  if (this->_internal_has_enemyinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enemyinfo(this),
        _Internal::enemyinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_StartGame)
  return target;
}

size_t S_StartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_StartGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.EnemyInfo enemyInfo = 1;
  if (this->_internal_has_enemyinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.enemyinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_StartGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_StartGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_StartGame::GetClassData() const { return &_class_data_; }


void S_StartGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_StartGame*>(&to_msg);
  auto& from = static_cast<const S_StartGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_StartGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enemyinfo()) {
    _this->_internal_mutable_enemyinfo()->::Protocol::EnemyInfo::MergeFrom(
        from._internal_enemyinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_StartGame::CopyFrom(const S_StartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_StartGame::IsInitialized() const {
  return true;
}

void S_StartGame::InternalSwap(S_StartGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.enemyinfo_, other->_impl_.enemyinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_StartGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_LeaveGame::_Internal {
 public:
};

S_LeaveGame::S_LeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LeaveGame)
}
S_LeaveGame::S_LeaveGame(const S_LeaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LeaveGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LeaveGame)
}

inline void S_LeaveGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LeaveGame::~S_LeaveGame() {
  // @@protoc_insertion_point(destructor:Protocol.S_LeaveGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LeaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LeaveGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LeaveGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LeaveGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LeaveGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LeaveGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LeaveGame)
  return target;
}

size_t S_LeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LeaveGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LeaveGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LeaveGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LeaveGame::GetClassData() const { return &_class_data_; }


void S_LeaveGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LeaveGame*>(&to_msg);
  auto& from = static_cast<const S_LeaveGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LeaveGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LeaveGame::CopyFrom(const S_LeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LeaveGame::IsInitialized() const {
  return true;
}

void S_LeaveGame::InternalSwap(S_LeaveGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LeaveGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class C_PlayStone::_Internal {
 public:
  static const ::Protocol::StoneInfo& stoneinfo(const C_PlayStone* msg);
};

const ::Protocol::StoneInfo&
C_PlayStone::_Internal::stoneinfo(const C_PlayStone* msg) {
  return *msg->_impl_.stoneinfo_;
}
void C_PlayStone::clear_stoneinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.stoneinfo_ != nullptr) {
    delete _impl_.stoneinfo_;
  }
  _impl_.stoneinfo_ = nullptr;
}
C_PlayStone::C_PlayStone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PlayStone)
}
C_PlayStone::C_PlayStone(const C_PlayStone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PlayStone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stoneinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stoneinfo()) {
    _this->_impl_.stoneinfo_ = new ::Protocol::StoneInfo(*from._impl_.stoneinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PlayStone)
}

inline void C_PlayStone::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stoneinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PlayStone::~C_PlayStone() {
  // @@protoc_insertion_point(destructor:Protocol.C_PlayStone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PlayStone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stoneinfo_;
}

void C_PlayStone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PlayStone::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PlayStone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stoneinfo_ != nullptr) {
    delete _impl_.stoneinfo_;
  }
  _impl_.stoneinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PlayStone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.StoneInfo stoneInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stoneinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PlayStone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PlayStone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.StoneInfo stoneInfo = 1;
  if (this->_internal_has_stoneinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stoneinfo(this),
        _Internal::stoneinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PlayStone)
  return target;
}

size_t C_PlayStone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PlayStone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.StoneInfo stoneInfo = 1;
  if (this->_internal_has_stoneinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stoneinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PlayStone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PlayStone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PlayStone::GetClassData() const { return &_class_data_; }


void C_PlayStone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PlayStone*>(&to_msg);
  auto& from = static_cast<const C_PlayStone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PlayStone)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stoneinfo()) {
    _this->_internal_mutable_stoneinfo()->::Protocol::StoneInfo::MergeFrom(
        from._internal_stoneinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PlayStone::CopyFrom(const C_PlayStone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PlayStone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PlayStone::IsInitialized() const {
  return true;
}

void C_PlayStone::InternalSwap(C_PlayStone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stoneinfo_, other->_impl_.stoneinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PlayStone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_PlayStone::_Internal {
 public:
  static const ::Protocol::StoneInfo& stoneinfo(const S_PlayStone* msg);
};

const ::Protocol::StoneInfo&
S_PlayStone::_Internal::stoneinfo(const S_PlayStone* msg) {
  return *msg->_impl_.stoneinfo_;
}
void S_PlayStone::clear_stoneinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.stoneinfo_ != nullptr) {
    delete _impl_.stoneinfo_;
  }
  _impl_.stoneinfo_ = nullptr;
}
S_PlayStone::S_PlayStone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PlayStone)
}
S_PlayStone::S_PlayStone(const S_PlayStone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PlayStone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stoneinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stoneinfo()) {
    _this->_impl_.stoneinfo_ = new ::Protocol::StoneInfo(*from._impl_.stoneinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PlayStone)
}

inline void S_PlayStone::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stoneinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PlayStone::~S_PlayStone() {
  // @@protoc_insertion_point(destructor:Protocol.S_PlayStone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PlayStone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stoneinfo_;
}

void S_PlayStone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PlayStone::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PlayStone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stoneinfo_ != nullptr) {
    delete _impl_.stoneinfo_;
  }
  _impl_.stoneinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PlayStone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.StoneInfo stoneInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stoneinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PlayStone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PlayStone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.StoneInfo stoneInfo = 1;
  if (this->_internal_has_stoneinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stoneinfo(this),
        _Internal::stoneinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PlayStone)
  return target;
}

size_t S_PlayStone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PlayStone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.StoneInfo stoneInfo = 1;
  if (this->_internal_has_stoneinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stoneinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PlayStone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PlayStone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PlayStone::GetClassData() const { return &_class_data_; }


void S_PlayStone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PlayStone*>(&to_msg);
  auto& from = static_cast<const S_PlayStone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PlayStone)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stoneinfo()) {
    _this->_internal_mutable_stoneinfo()->::Protocol::StoneInfo::MergeFrom(
        from._internal_stoneinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PlayStone::CopyFrom(const S_PlayStone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PlayStone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PlayStone::IsInitialized() const {
  return true;
}

void S_PlayStone::InternalSwap(S_PlayStone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stoneinfo_, other->_impl_.stoneinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PlayStone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_CheckStone::_Internal {
 public:
};

S_CheckStone::S_CheckStone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CheckStone)
}
S_CheckStone::S_CheckStone(const S_CheckStone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CheckStone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.enable_ = from._impl_.enable_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CheckStone)
}

inline void S_CheckStone::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_CheckStone::~S_CheckStone() {
  // @@protoc_insertion_point(destructor:Protocol.S_CheckStone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CheckStone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CheckStone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CheckStone::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CheckStone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CheckStone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CheckStone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CheckStone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CheckStone)
  return target;
}

size_t S_CheckStone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CheckStone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CheckStone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CheckStone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CheckStone::GetClassData() const { return &_class_data_; }


void S_CheckStone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CheckStone*>(&to_msg);
  auto& from = static_cast<const S_CheckStone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CheckStone)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CheckStone::CopyFrom(const S_CheckStone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CheckStone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CheckStone::IsInitialized() const {
  return true;
}

void S_CheckStone::InternalSwap(S_CheckStone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.enable_, other->_impl_.enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CheckStone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class S_ThrowResult::_Internal {
 public:
  static const ::Protocol::StoneInfo& stoneinfo(const S_ThrowResult* msg);
};

const ::Protocol::StoneInfo&
S_ThrowResult::_Internal::stoneinfo(const S_ThrowResult* msg) {
  return *msg->_impl_.stoneinfo_;
}
void S_ThrowResult::clear_stoneinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.stoneinfo_ != nullptr) {
    delete _impl_.stoneinfo_;
  }
  _impl_.stoneinfo_ = nullptr;
}
S_ThrowResult::S_ThrowResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ThrowResult)
}
S_ThrowResult::S_ThrowResult(const S_ThrowResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ThrowResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stoneinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stoneinfo()) {
    _this->_impl_.stoneinfo_ = new ::Protocol::StoneInfo(*from._impl_.stoneinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ThrowResult)
}

inline void S_ThrowResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stoneinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ThrowResult::~S_ThrowResult() {
  // @@protoc_insertion_point(destructor:Protocol.S_ThrowResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ThrowResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stoneinfo_;
}

void S_ThrowResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ThrowResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ThrowResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stoneinfo_ != nullptr) {
    delete _impl_.stoneinfo_;
  }
  _impl_.stoneinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ThrowResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.StoneInfo stoneInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stoneinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ThrowResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ThrowResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.StoneInfo stoneInfo = 1;
  if (this->_internal_has_stoneinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stoneinfo(this),
        _Internal::stoneinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ThrowResult)
  return target;
}

size_t S_ThrowResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ThrowResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.StoneInfo stoneInfo = 1;
  if (this->_internal_has_stoneinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stoneinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ThrowResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ThrowResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ThrowResult::GetClassData() const { return &_class_data_; }


void S_ThrowResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ThrowResult*>(&to_msg);
  auto& from = static_cast<const S_ThrowResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ThrowResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stoneinfo()) {
    _this->_internal_mutable_stoneinfo()->::Protocol::StoneInfo::MergeFrom(
        from._internal_stoneinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ThrowResult::CopyFrom(const S_ThrowResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ThrowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ThrowResult::IsInitialized() const {
  return true;
}

void S_ThrowResult::InternalSwap(S_ThrowResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stoneinfo_, other->_impl_.stoneinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ThrowResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::S_Login*
Arena::CreateMaybeMessage< ::Protocol::S_Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Login >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SignUp*
Arena::CreateMaybeMessage< ::Protocol::C_SignUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SignUp >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ThrowSignUpError*
Arena::CreateMaybeMessage< ::Protocol::S_ThrowSignUpError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ThrowSignUpError >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_EnterRoom*
Arena::CreateMaybeMessage< ::Protocol::C_EnterRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_EnterRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_StartGame*
Arena::CreateMaybeMessage< ::Protocol::S_StartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_StartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LeaveGame*
Arena::CreateMaybeMessage< ::Protocol::S_LeaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LeaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PlayStone*
Arena::CreateMaybeMessage< ::Protocol::C_PlayStone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PlayStone >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PlayStone*
Arena::CreateMaybeMessage< ::Protocol::S_PlayStone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PlayStone >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CheckStone*
Arena::CreateMaybeMessage< ::Protocol::S_CheckStone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CheckStone >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ThrowResult*
Arena::CreateMaybeMessage< ::Protocol::S_ThrowResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ThrowResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
