// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_Dummy;
struct C_DummyDefaultTypeInternal;
extern C_DummyDefaultTypeInternal _C_Dummy_default_instance_;
class C_EnterRoom;
struct C_EnterRoomDefaultTypeInternal;
extern C_EnterRoomDefaultTypeInternal _C_EnterRoom_default_instance_;
class C_PlayStone;
struct C_PlayStoneDefaultTypeInternal;
extern C_PlayStoneDefaultTypeInternal _C_PlayStone_default_instance_;
class C_SignUp;
struct C_SignUpDefaultTypeInternal;
extern C_SignUpDefaultTypeInternal _C_SignUp_default_instance_;
class S_CheckStone;
struct S_CheckStoneDefaultTypeInternal;
extern S_CheckStoneDefaultTypeInternal _S_CheckStone_default_instance_;
class S_LeaveGame;
struct S_LeaveGameDefaultTypeInternal;
extern S_LeaveGameDefaultTypeInternal _S_LeaveGame_default_instance_;
class S_Login;
struct S_LoginDefaultTypeInternal;
extern S_LoginDefaultTypeInternal _S_Login_default_instance_;
class S_PlayStone;
struct S_PlayStoneDefaultTypeInternal;
extern S_PlayStoneDefaultTypeInternal _S_PlayStone_default_instance_;
class S_StartGame;
struct S_StartGameDefaultTypeInternal;
extern S_StartGameDefaultTypeInternal _S_StartGame_default_instance_;
class S_ThrowResult;
struct S_ThrowResultDefaultTypeInternal;
extern S_ThrowResultDefaultTypeInternal _S_ThrowResult_default_instance_;
class S_ThrowSignUpError;
struct S_ThrowSignUpErrorDefaultTypeInternal;
extern S_ThrowSignUpErrorDefaultTypeInternal _S_ThrowSignUpError_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_Dummy* Arena::CreateMaybeMessage<::Protocol::C_Dummy>(Arena*);
template<> ::Protocol::C_EnterRoom* Arena::CreateMaybeMessage<::Protocol::C_EnterRoom>(Arena*);
template<> ::Protocol::C_PlayStone* Arena::CreateMaybeMessage<::Protocol::C_PlayStone>(Arena*);
template<> ::Protocol::C_SignUp* Arena::CreateMaybeMessage<::Protocol::C_SignUp>(Arena*);
template<> ::Protocol::S_CheckStone* Arena::CreateMaybeMessage<::Protocol::S_CheckStone>(Arena*);
template<> ::Protocol::S_LeaveGame* Arena::CreateMaybeMessage<::Protocol::S_LeaveGame>(Arena*);
template<> ::Protocol::S_Login* Arena::CreateMaybeMessage<::Protocol::S_Login>(Arena*);
template<> ::Protocol::S_PlayStone* Arena::CreateMaybeMessage<::Protocol::S_PlayStone>(Arena*);
template<> ::Protocol::S_StartGame* Arena::CreateMaybeMessage<::Protocol::S_StartGame>(Arena*);
template<> ::Protocol::S_ThrowResult* Arena::CreateMaybeMessage<::Protocol::S_ThrowResult>(Arena*);
template<> ::Protocol::S_ThrowSignUpError* Arena::CreateMaybeMessage<::Protocol::S_ThrowSignUpError>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class S_Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Login) */ {
 public:
  inline S_Login() : S_Login(nullptr) {}
  ~S_Login() override;
  explicit PROTOBUF_CONSTEXPR S_Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Login(const S_Login& from);
  S_Login(S_Login&& from) noexcept
    : S_Login() {
    *this = ::std::move(from);
  }

  inline S_Login& operator=(const S_Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Login& operator=(S_Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Login* internal_default_instance() {
    return reinterpret_cast<const S_Login*>(
               &_S_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_Login& a, S_Login& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Login& from) {
    S_Login::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Login";
  }
  protected:
  explicit S_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .Protocol.PlayerInfo playerInfo = 3;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::PlayerInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerInfo* release_playerinfo();
  ::Protocol::PlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::PlayerInfo* playerinfo);
  private:
  const ::Protocol::PlayerInfo& _internal_playerinfo() const;
  ::Protocol::PlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::PlayerInfo* playerinfo);
  ::Protocol::PlayerInfo* unsafe_arena_release_playerinfo();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .Protocol.LOG_IN_ERROR error = 2;
  void clear_error();
  ::Protocol::LOG_IN_ERROR error() const;
  void set_error(::Protocol::LOG_IN_ERROR value);
  private:
  ::Protocol::LOG_IN_ERROR _internal_error() const;
  void _internal_set_error(::Protocol::LOG_IN_ERROR value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerInfo* playerinfo_;
    bool success_;
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SignUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SignUp) */ {
 public:
  inline C_SignUp() : C_SignUp(nullptr) {}
  ~C_SignUp() override;
  explicit PROTOBUF_CONSTEXPR C_SignUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SignUp(const C_SignUp& from);
  C_SignUp(C_SignUp&& from) noexcept
    : C_SignUp() {
    *this = ::std::move(from);
  }

  inline C_SignUp& operator=(const C_SignUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SignUp& operator=(C_SignUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SignUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SignUp* internal_default_instance() {
    return reinterpret_cast<const C_SignUp*>(
               &_C_SignUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_SignUp& a, C_SignUp& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SignUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SignUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SignUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SignUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SignUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SignUp& from) {
    C_SignUp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SignUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SignUp";
  }
  protected:
  explicit C_SignUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SignUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ThrowSignUpError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ThrowSignUpError) */ {
 public:
  inline S_ThrowSignUpError() : S_ThrowSignUpError(nullptr) {}
  ~S_ThrowSignUpError() override;
  explicit PROTOBUF_CONSTEXPR S_ThrowSignUpError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ThrowSignUpError(const S_ThrowSignUpError& from);
  S_ThrowSignUpError(S_ThrowSignUpError&& from) noexcept
    : S_ThrowSignUpError() {
    *this = ::std::move(from);
  }

  inline S_ThrowSignUpError& operator=(const S_ThrowSignUpError& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ThrowSignUpError& operator=(S_ThrowSignUpError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ThrowSignUpError& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ThrowSignUpError* internal_default_instance() {
    return reinterpret_cast<const S_ThrowSignUpError*>(
               &_S_ThrowSignUpError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_ThrowSignUpError& a, S_ThrowSignUpError& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ThrowSignUpError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ThrowSignUpError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ThrowSignUpError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ThrowSignUpError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ThrowSignUpError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ThrowSignUpError& from) {
    S_ThrowSignUpError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ThrowSignUpError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ThrowSignUpError";
  }
  protected:
  explicit S_ThrowSignUpError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .Protocol.SIGN_UP_ERROR error = 1;
  void clear_error();
  ::Protocol::SIGN_UP_ERROR error() const;
  void set_error(::Protocol::SIGN_UP_ERROR value);
  private:
  ::Protocol::SIGN_UP_ERROR _internal_error() const;
  void _internal_set_error(::Protocol::SIGN_UP_ERROR value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ThrowSignUpError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_EnterRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_EnterRoom) */ {
 public:
  inline C_EnterRoom() : C_EnterRoom(nullptr) {}
  ~C_EnterRoom() override;
  explicit PROTOBUF_CONSTEXPR C_EnterRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_EnterRoom(const C_EnterRoom& from);
  C_EnterRoom(C_EnterRoom&& from) noexcept
    : C_EnterRoom() {
    *this = ::std::move(from);
  }

  inline C_EnterRoom& operator=(const C_EnterRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_EnterRoom& operator=(C_EnterRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_EnterRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_EnterRoom* internal_default_instance() {
    return reinterpret_cast<const C_EnterRoom*>(
               &_C_EnterRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_EnterRoom& a, C_EnterRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(C_EnterRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_EnterRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_EnterRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_EnterRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_EnterRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_EnterRoom& from) {
    C_EnterRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_EnterRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_EnterRoom";
  }
  protected:
  explicit C_EnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // uint64 accountId = 1;
  void clear_accountid();
  uint64_t accountid() const;
  void set_accountid(uint64_t value);
  private:
  uint64_t _internal_accountid() const;
  void _internal_set_accountid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_EnterRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t accountid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_StartGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_StartGame) */ {
 public:
  inline S_StartGame() : S_StartGame(nullptr) {}
  ~S_StartGame() override;
  explicit PROTOBUF_CONSTEXPR S_StartGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_StartGame(const S_StartGame& from);
  S_StartGame(S_StartGame&& from) noexcept
    : S_StartGame() {
    *this = ::std::move(from);
  }

  inline S_StartGame& operator=(const S_StartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_StartGame& operator=(S_StartGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_StartGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_StartGame* internal_default_instance() {
    return reinterpret_cast<const S_StartGame*>(
               &_S_StartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_StartGame& a, S_StartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(S_StartGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_StartGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_StartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_StartGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_StartGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_StartGame& from) {
    S_StartGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_StartGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_StartGame";
  }
  protected:
  explicit S_StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnemyInfoFieldNumber = 1,
  };
  // .Protocol.EnemyInfo enemyInfo = 1;
  bool has_enemyinfo() const;
  private:
  bool _internal_has_enemyinfo() const;
  public:
  void clear_enemyinfo();
  const ::Protocol::EnemyInfo& enemyinfo() const;
  PROTOBUF_NODISCARD ::Protocol::EnemyInfo* release_enemyinfo();
  ::Protocol::EnemyInfo* mutable_enemyinfo();
  void set_allocated_enemyinfo(::Protocol::EnemyInfo* enemyinfo);
  private:
  const ::Protocol::EnemyInfo& _internal_enemyinfo() const;
  ::Protocol::EnemyInfo* _internal_mutable_enemyinfo();
  public:
  void unsafe_arena_set_allocated_enemyinfo(
      ::Protocol::EnemyInfo* enemyinfo);
  ::Protocol::EnemyInfo* unsafe_arena_release_enemyinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_StartGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::EnemyInfo* enemyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LeaveGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LeaveGame) */ {
 public:
  inline S_LeaveGame() : S_LeaveGame(nullptr) {}
  ~S_LeaveGame() override;
  explicit PROTOBUF_CONSTEXPR S_LeaveGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LeaveGame(const S_LeaveGame& from);
  S_LeaveGame(S_LeaveGame&& from) noexcept
    : S_LeaveGame() {
    *this = ::std::move(from);
  }

  inline S_LeaveGame& operator=(const S_LeaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LeaveGame& operator=(S_LeaveGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LeaveGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LeaveGame* internal_default_instance() {
    return reinterpret_cast<const S_LeaveGame*>(
               &_S_LeaveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_LeaveGame& a, S_LeaveGame& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LeaveGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LeaveGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LeaveGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LeaveGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LeaveGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LeaveGame& from) {
    S_LeaveGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LeaveGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LeaveGame";
  }
  protected:
  explicit S_LeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LeaveGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PlayStone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PlayStone) */ {
 public:
  inline C_PlayStone() : C_PlayStone(nullptr) {}
  ~C_PlayStone() override;
  explicit PROTOBUF_CONSTEXPR C_PlayStone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PlayStone(const C_PlayStone& from);
  C_PlayStone(C_PlayStone&& from) noexcept
    : C_PlayStone() {
    *this = ::std::move(from);
  }

  inline C_PlayStone& operator=(const C_PlayStone& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PlayStone& operator=(C_PlayStone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PlayStone& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PlayStone* internal_default_instance() {
    return reinterpret_cast<const C_PlayStone*>(
               &_C_PlayStone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_PlayStone& a, C_PlayStone& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PlayStone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PlayStone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PlayStone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PlayStone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_PlayStone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_PlayStone& from) {
    C_PlayStone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PlayStone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PlayStone";
  }
  protected:
  explicit C_PlayStone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoneInfoFieldNumber = 1,
  };
  // .Protocol.StoneInfo stoneInfo = 1;
  bool has_stoneinfo() const;
  private:
  bool _internal_has_stoneinfo() const;
  public:
  void clear_stoneinfo();
  const ::Protocol::StoneInfo& stoneinfo() const;
  PROTOBUF_NODISCARD ::Protocol::StoneInfo* release_stoneinfo();
  ::Protocol::StoneInfo* mutable_stoneinfo();
  void set_allocated_stoneinfo(::Protocol::StoneInfo* stoneinfo);
  private:
  const ::Protocol::StoneInfo& _internal_stoneinfo() const;
  ::Protocol::StoneInfo* _internal_mutable_stoneinfo();
  public:
  void unsafe_arena_set_allocated_stoneinfo(
      ::Protocol::StoneInfo* stoneinfo);
  ::Protocol::StoneInfo* unsafe_arena_release_stoneinfo();

  // @@protoc_insertion_point(class_scope:Protocol.C_PlayStone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::StoneInfo* stoneinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PlayStone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PlayStone) */ {
 public:
  inline S_PlayStone() : S_PlayStone(nullptr) {}
  ~S_PlayStone() override;
  explicit PROTOBUF_CONSTEXPR S_PlayStone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PlayStone(const S_PlayStone& from);
  S_PlayStone(S_PlayStone&& from) noexcept
    : S_PlayStone() {
    *this = ::std::move(from);
  }

  inline S_PlayStone& operator=(const S_PlayStone& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PlayStone& operator=(S_PlayStone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PlayStone& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PlayStone* internal_default_instance() {
    return reinterpret_cast<const S_PlayStone*>(
               &_S_PlayStone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_PlayStone& a, S_PlayStone& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PlayStone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PlayStone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PlayStone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PlayStone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PlayStone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PlayStone& from) {
    S_PlayStone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PlayStone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PlayStone";
  }
  protected:
  explicit S_PlayStone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoneInfoFieldNumber = 1,
  };
  // .Protocol.StoneInfo stoneInfo = 1;
  bool has_stoneinfo() const;
  private:
  bool _internal_has_stoneinfo() const;
  public:
  void clear_stoneinfo();
  const ::Protocol::StoneInfo& stoneinfo() const;
  PROTOBUF_NODISCARD ::Protocol::StoneInfo* release_stoneinfo();
  ::Protocol::StoneInfo* mutable_stoneinfo();
  void set_allocated_stoneinfo(::Protocol::StoneInfo* stoneinfo);
  private:
  const ::Protocol::StoneInfo& _internal_stoneinfo() const;
  ::Protocol::StoneInfo* _internal_mutable_stoneinfo();
  public:
  void unsafe_arena_set_allocated_stoneinfo(
      ::Protocol::StoneInfo* stoneinfo);
  ::Protocol::StoneInfo* unsafe_arena_release_stoneinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_PlayStone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::StoneInfo* stoneinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CheckStone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CheckStone) */ {
 public:
  inline S_CheckStone() : S_CheckStone(nullptr) {}
  ~S_CheckStone() override;
  explicit PROTOBUF_CONSTEXPR S_CheckStone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CheckStone(const S_CheckStone& from);
  S_CheckStone(S_CheckStone&& from) noexcept
    : S_CheckStone() {
    *this = ::std::move(from);
  }

  inline S_CheckStone& operator=(const S_CheckStone& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CheckStone& operator=(S_CheckStone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CheckStone& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CheckStone* internal_default_instance() {
    return reinterpret_cast<const S_CheckStone*>(
               &_S_CheckStone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_CheckStone& a, S_CheckStone& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CheckStone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CheckStone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CheckStone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CheckStone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CheckStone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CheckStone& from) {
    S_CheckStone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CheckStone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CheckStone";
  }
  protected:
  explicit S_CheckStone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CheckStone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ThrowResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ThrowResult) */ {
 public:
  inline S_ThrowResult() : S_ThrowResult(nullptr) {}
  ~S_ThrowResult() override;
  explicit PROTOBUF_CONSTEXPR S_ThrowResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ThrowResult(const S_ThrowResult& from);
  S_ThrowResult(S_ThrowResult&& from) noexcept
    : S_ThrowResult() {
    *this = ::std::move(from);
  }

  inline S_ThrowResult& operator=(const S_ThrowResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ThrowResult& operator=(S_ThrowResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ThrowResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ThrowResult* internal_default_instance() {
    return reinterpret_cast<const S_ThrowResult*>(
               &_S_ThrowResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_ThrowResult& a, S_ThrowResult& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ThrowResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ThrowResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ThrowResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ThrowResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ThrowResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ThrowResult& from) {
    S_ThrowResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ThrowResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ThrowResult";
  }
  protected:
  explicit S_ThrowResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoneInfoFieldNumber = 1,
  };
  // .Protocol.StoneInfo stoneInfo = 1;
  bool has_stoneinfo() const;
  private:
  bool _internal_has_stoneinfo() const;
  public:
  void clear_stoneinfo();
  const ::Protocol::StoneInfo& stoneinfo() const;
  PROTOBUF_NODISCARD ::Protocol::StoneInfo* release_stoneinfo();
  ::Protocol::StoneInfo* mutable_stoneinfo();
  void set_allocated_stoneinfo(::Protocol::StoneInfo* stoneinfo);
  private:
  const ::Protocol::StoneInfo& _internal_stoneinfo() const;
  ::Protocol::StoneInfo* _internal_mutable_stoneinfo();
  public:
  void unsafe_arena_set_allocated_stoneinfo(
      ::Protocol::StoneInfo* stoneinfo);
  ::Protocol::StoneInfo* unsafe_arena_release_stoneinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ThrowResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::StoneInfo* stoneinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Dummy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Dummy) */ {
 public:
  inline C_Dummy() : C_Dummy(nullptr) {}
  ~C_Dummy() override;
  explicit PROTOBUF_CONSTEXPR C_Dummy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Dummy(const C_Dummy& from);
  C_Dummy(C_Dummy&& from) noexcept
    : C_Dummy() {
    *this = ::std::move(from);
  }

  inline C_Dummy& operator=(const C_Dummy& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Dummy& operator=(C_Dummy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Dummy& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Dummy* internal_default_instance() {
    return reinterpret_cast<const C_Dummy*>(
               &_C_Dummy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_Dummy& a, C_Dummy& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Dummy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Dummy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Dummy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Dummy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Dummy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Dummy& from) {
    C_Dummy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Dummy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Dummy";
  }
  protected:
  explicit C_Dummy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Dummy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_Login

// bool success = 1;
inline void S_Login::clear_success() {
  _impl_.success_ = false;
}
inline bool S_Login::_internal_success() const {
  return _impl_.success_;
}
inline bool S_Login::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Login.success)
  return _internal_success();
}
inline void S_Login::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_Login::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Login.success)
}

// .Protocol.LOG_IN_ERROR error = 2;
inline void S_Login::clear_error() {
  _impl_.error_ = 0;
}
inline ::Protocol::LOG_IN_ERROR S_Login::_internal_error() const {
  return static_cast< ::Protocol::LOG_IN_ERROR >(_impl_.error_);
}
inline ::Protocol::LOG_IN_ERROR S_Login::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Login.error)
  return _internal_error();
}
inline void S_Login::_internal_set_error(::Protocol::LOG_IN_ERROR value) {
  
  _impl_.error_ = value;
}
inline void S_Login::set_error(::Protocol::LOG_IN_ERROR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Login.error)
}

// .Protocol.PlayerInfo playerInfo = 3;
inline bool S_Login::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool S_Login::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline const ::Protocol::PlayerInfo& S_Login::_internal_playerinfo() const {
  const ::Protocol::PlayerInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& S_Login::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Login.playerInfo)
  return _internal_playerinfo();
}
inline void S_Login::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::PlayerInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Login.playerInfo)
}
inline ::Protocol::PlayerInfo* S_Login::release_playerinfo() {
  
  ::Protocol::PlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerInfo* S_Login::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_Login.playerInfo)
  
  ::Protocol::PlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* S_Login::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::Protocol::PlayerInfo* S_Login::mutable_playerinfo() {
  ::Protocol::PlayerInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Login.playerInfo)
  return _msg;
}
inline void S_Login::set_allocated_playerinfo(::Protocol::PlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerinfo));
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Login.playerInfo)
}

// -------------------------------------------------------------------

// C_SignUp

// string name = 1;
inline void C_SignUp::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& C_SignUp::name() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SignUp.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SignUp::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SignUp.name)
}
inline std::string* C_SignUp::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SignUp.name)
  return _s;
}
inline const std::string& C_SignUp::_internal_name() const {
  return _impl_.name_.Get();
}
inline void C_SignUp::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_SignUp::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_SignUp::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.C_SignUp.name)
  return _impl_.name_.Release();
}
inline void C_SignUp::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SignUp.name)
}

// -------------------------------------------------------------------

// S_ThrowSignUpError

// .Protocol.SIGN_UP_ERROR error = 1;
inline void S_ThrowSignUpError::clear_error() {
  _impl_.error_ = 0;
}
inline ::Protocol::SIGN_UP_ERROR S_ThrowSignUpError::_internal_error() const {
  return static_cast< ::Protocol::SIGN_UP_ERROR >(_impl_.error_);
}
inline ::Protocol::SIGN_UP_ERROR S_ThrowSignUpError::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ThrowSignUpError.error)
  return _internal_error();
}
inline void S_ThrowSignUpError::_internal_set_error(::Protocol::SIGN_UP_ERROR value) {
  
  _impl_.error_ = value;
}
inline void S_ThrowSignUpError::set_error(::Protocol::SIGN_UP_ERROR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ThrowSignUpError.error)
}

// -------------------------------------------------------------------

// C_EnterRoom

// uint64 accountId = 1;
inline void C_EnterRoom::clear_accountid() {
  _impl_.accountid_ = uint64_t{0u};
}
inline uint64_t C_EnterRoom::_internal_accountid() const {
  return _impl_.accountid_;
}
inline uint64_t C_EnterRoom::accountid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EnterRoom.accountId)
  return _internal_accountid();
}
inline void C_EnterRoom::_internal_set_accountid(uint64_t value) {
  
  _impl_.accountid_ = value;
}
inline void C_EnterRoom::set_accountid(uint64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EnterRoom.accountId)
}

// -------------------------------------------------------------------

// S_StartGame

// .Protocol.EnemyInfo enemyInfo = 1;
inline bool S_StartGame::_internal_has_enemyinfo() const {
  return this != internal_default_instance() && _impl_.enemyinfo_ != nullptr;
}
inline bool S_StartGame::has_enemyinfo() const {
  return _internal_has_enemyinfo();
}
inline const ::Protocol::EnemyInfo& S_StartGame::_internal_enemyinfo() const {
  const ::Protocol::EnemyInfo* p = _impl_.enemyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::EnemyInfo&>(
      ::Protocol::_EnemyInfo_default_instance_);
}
inline const ::Protocol::EnemyInfo& S_StartGame::enemyinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_StartGame.enemyInfo)
  return _internal_enemyinfo();
}
inline void S_StartGame::unsafe_arena_set_allocated_enemyinfo(
    ::Protocol::EnemyInfo* enemyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enemyinfo_);
  }
  _impl_.enemyinfo_ = enemyinfo;
  if (enemyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_StartGame.enemyInfo)
}
inline ::Protocol::EnemyInfo* S_StartGame::release_enemyinfo() {
  
  ::Protocol::EnemyInfo* temp = _impl_.enemyinfo_;
  _impl_.enemyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::EnemyInfo* S_StartGame::unsafe_arena_release_enemyinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_StartGame.enemyInfo)
  
  ::Protocol::EnemyInfo* temp = _impl_.enemyinfo_;
  _impl_.enemyinfo_ = nullptr;
  return temp;
}
inline ::Protocol::EnemyInfo* S_StartGame::_internal_mutable_enemyinfo() {
  
  if (_impl_.enemyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::EnemyInfo>(GetArenaForAllocation());
    _impl_.enemyinfo_ = p;
  }
  return _impl_.enemyinfo_;
}
inline ::Protocol::EnemyInfo* S_StartGame::mutable_enemyinfo() {
  ::Protocol::EnemyInfo* _msg = _internal_mutable_enemyinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_StartGame.enemyInfo)
  return _msg;
}
inline void S_StartGame::set_allocated_enemyinfo(::Protocol::EnemyInfo* enemyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enemyinfo_);
  }
  if (enemyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enemyinfo));
    if (message_arena != submessage_arena) {
      enemyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enemyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enemyinfo_ = enemyinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_StartGame.enemyInfo)
}

// -------------------------------------------------------------------

// S_LeaveGame

// bool success = 1;
inline void S_LeaveGame::clear_success() {
  _impl_.success_ = false;
}
inline bool S_LeaveGame::_internal_success() const {
  return _impl_.success_;
}
inline bool S_LeaveGame::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LeaveGame.success)
  return _internal_success();
}
inline void S_LeaveGame::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_LeaveGame::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LeaveGame.success)
}

// -------------------------------------------------------------------

// C_PlayStone

// .Protocol.StoneInfo stoneInfo = 1;
inline bool C_PlayStone::_internal_has_stoneinfo() const {
  return this != internal_default_instance() && _impl_.stoneinfo_ != nullptr;
}
inline bool C_PlayStone::has_stoneinfo() const {
  return _internal_has_stoneinfo();
}
inline const ::Protocol::StoneInfo& C_PlayStone::_internal_stoneinfo() const {
  const ::Protocol::StoneInfo* p = _impl_.stoneinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StoneInfo&>(
      ::Protocol::_StoneInfo_default_instance_);
}
inline const ::Protocol::StoneInfo& C_PlayStone::stoneinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PlayStone.stoneInfo)
  return _internal_stoneinfo();
}
inline void C_PlayStone::unsafe_arena_set_allocated_stoneinfo(
    ::Protocol::StoneInfo* stoneinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stoneinfo_);
  }
  _impl_.stoneinfo_ = stoneinfo;
  if (stoneinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PlayStone.stoneInfo)
}
inline ::Protocol::StoneInfo* C_PlayStone::release_stoneinfo() {
  
  ::Protocol::StoneInfo* temp = _impl_.stoneinfo_;
  _impl_.stoneinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::StoneInfo* C_PlayStone::unsafe_arena_release_stoneinfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_PlayStone.stoneInfo)
  
  ::Protocol::StoneInfo* temp = _impl_.stoneinfo_;
  _impl_.stoneinfo_ = nullptr;
  return temp;
}
inline ::Protocol::StoneInfo* C_PlayStone::_internal_mutable_stoneinfo() {
  
  if (_impl_.stoneinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StoneInfo>(GetArenaForAllocation());
    _impl_.stoneinfo_ = p;
  }
  return _impl_.stoneinfo_;
}
inline ::Protocol::StoneInfo* C_PlayStone::mutable_stoneinfo() {
  ::Protocol::StoneInfo* _msg = _internal_mutable_stoneinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PlayStone.stoneInfo)
  return _msg;
}
inline void C_PlayStone::set_allocated_stoneinfo(::Protocol::StoneInfo* stoneinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stoneinfo_);
  }
  if (stoneinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stoneinfo));
    if (message_arena != submessage_arena) {
      stoneinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stoneinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stoneinfo_ = stoneinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PlayStone.stoneInfo)
}

// -------------------------------------------------------------------

// S_PlayStone

// .Protocol.StoneInfo stoneInfo = 1;
inline bool S_PlayStone::_internal_has_stoneinfo() const {
  return this != internal_default_instance() && _impl_.stoneinfo_ != nullptr;
}
inline bool S_PlayStone::has_stoneinfo() const {
  return _internal_has_stoneinfo();
}
inline const ::Protocol::StoneInfo& S_PlayStone::_internal_stoneinfo() const {
  const ::Protocol::StoneInfo* p = _impl_.stoneinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StoneInfo&>(
      ::Protocol::_StoneInfo_default_instance_);
}
inline const ::Protocol::StoneInfo& S_PlayStone::stoneinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PlayStone.stoneInfo)
  return _internal_stoneinfo();
}
inline void S_PlayStone::unsafe_arena_set_allocated_stoneinfo(
    ::Protocol::StoneInfo* stoneinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stoneinfo_);
  }
  _impl_.stoneinfo_ = stoneinfo;
  if (stoneinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PlayStone.stoneInfo)
}
inline ::Protocol::StoneInfo* S_PlayStone::release_stoneinfo() {
  
  ::Protocol::StoneInfo* temp = _impl_.stoneinfo_;
  _impl_.stoneinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::StoneInfo* S_PlayStone::unsafe_arena_release_stoneinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_PlayStone.stoneInfo)
  
  ::Protocol::StoneInfo* temp = _impl_.stoneinfo_;
  _impl_.stoneinfo_ = nullptr;
  return temp;
}
inline ::Protocol::StoneInfo* S_PlayStone::_internal_mutable_stoneinfo() {
  
  if (_impl_.stoneinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StoneInfo>(GetArenaForAllocation());
    _impl_.stoneinfo_ = p;
  }
  return _impl_.stoneinfo_;
}
inline ::Protocol::StoneInfo* S_PlayStone::mutable_stoneinfo() {
  ::Protocol::StoneInfo* _msg = _internal_mutable_stoneinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PlayStone.stoneInfo)
  return _msg;
}
inline void S_PlayStone::set_allocated_stoneinfo(::Protocol::StoneInfo* stoneinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stoneinfo_);
  }
  if (stoneinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stoneinfo));
    if (message_arena != submessage_arena) {
      stoneinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stoneinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stoneinfo_ = stoneinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PlayStone.stoneInfo)
}

// -------------------------------------------------------------------

// S_CheckStone

// bool enable = 1;
inline void S_CheckStone::clear_enable() {
  _impl_.enable_ = false;
}
inline bool S_CheckStone::_internal_enable() const {
  return _impl_.enable_;
}
inline bool S_CheckStone::enable() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CheckStone.enable)
  return _internal_enable();
}
inline void S_CheckStone::_internal_set_enable(bool value) {
  
  _impl_.enable_ = value;
}
inline void S_CheckStone::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CheckStone.enable)
}

// -------------------------------------------------------------------

// S_ThrowResult

// .Protocol.StoneInfo stoneInfo = 1;
inline bool S_ThrowResult::_internal_has_stoneinfo() const {
  return this != internal_default_instance() && _impl_.stoneinfo_ != nullptr;
}
inline bool S_ThrowResult::has_stoneinfo() const {
  return _internal_has_stoneinfo();
}
inline const ::Protocol::StoneInfo& S_ThrowResult::_internal_stoneinfo() const {
  const ::Protocol::StoneInfo* p = _impl_.stoneinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StoneInfo&>(
      ::Protocol::_StoneInfo_default_instance_);
}
inline const ::Protocol::StoneInfo& S_ThrowResult::stoneinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ThrowResult.stoneInfo)
  return _internal_stoneinfo();
}
inline void S_ThrowResult::unsafe_arena_set_allocated_stoneinfo(
    ::Protocol::StoneInfo* stoneinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stoneinfo_);
  }
  _impl_.stoneinfo_ = stoneinfo;
  if (stoneinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ThrowResult.stoneInfo)
}
inline ::Protocol::StoneInfo* S_ThrowResult::release_stoneinfo() {
  
  ::Protocol::StoneInfo* temp = _impl_.stoneinfo_;
  _impl_.stoneinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::StoneInfo* S_ThrowResult::unsafe_arena_release_stoneinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ThrowResult.stoneInfo)
  
  ::Protocol::StoneInfo* temp = _impl_.stoneinfo_;
  _impl_.stoneinfo_ = nullptr;
  return temp;
}
inline ::Protocol::StoneInfo* S_ThrowResult::_internal_mutable_stoneinfo() {
  
  if (_impl_.stoneinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StoneInfo>(GetArenaForAllocation());
    _impl_.stoneinfo_ = p;
  }
  return _impl_.stoneinfo_;
}
inline ::Protocol::StoneInfo* S_ThrowResult::mutable_stoneinfo() {
  ::Protocol::StoneInfo* _msg = _internal_mutable_stoneinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ThrowResult.stoneInfo)
  return _msg;
}
inline void S_ThrowResult::set_allocated_stoneinfo(::Protocol::StoneInfo* stoneinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stoneinfo_);
  }
  if (stoneinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stoneinfo));
    if (message_arena != submessage_arena) {
      stoneinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stoneinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stoneinfo_ = stoneinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ThrowResult.stoneInfo)
}

// -------------------------------------------------------------------

// C_Dummy

// bool success = 1;
inline void C_Dummy::clear_success() {
  _impl_.success_ = false;
}
inline bool C_Dummy::_internal_success() const {
  return _impl_.success_;
}
inline bool C_Dummy::success() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Dummy.success)
  return _internal_success();
}
inline void C_Dummy::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void C_Dummy::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Dummy.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
